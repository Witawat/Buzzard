#usage "en: <b>Create a polygon based label using SparkFun's Buzzard system."
"<p>Usage: run makeLabel</p>"
    "<p>Author: <author>Nathan Seidle</author><br />"
    "Version: <em>1.0</em></p>"

    /*

    run C:\Dropbox\Projects\Buzzard\makelabel.ulp C:/Dropbox/Projects/Buzzard/text.svg -s 300


*/
    /*
*******************************************************************************
*                           GLOBAL VARIABLES
*******************************************************************************
*/

    string ConfigFileName = "buzzard_ulp.cfg";

string commandToRun;
string s;
string label;

int selectedStart = 0;
string startTag[] = {" ", "(", "/", "\\", ">", "["};
int selectedEnd = 0;
string endTag[] = {" ", ")", "/", "\\", "<", "]"};
real scaleFactor = 0.04;
int selectedLayer = 2;
string layers[] = {"1 -Top", "2 - Bottom", "21 - tPlace", "22 - bPlace", "25 - tNames", "26 - bNames"};
int selectedAlign = 4;
string align[] = {"Botttom left", "Bottom center", "Bottom right", "Center", "Center left", "Top left", "Top center", "Top right"};
int selectedFont = 0;
string font[] = {"FredokaOne", "Roboto"};
int outputMode = 0;
string signalName = "GND";
real traceWidth = 0;
int anchorPosition = 1;
int writeMode = 0;
string outputFileName = "";
string buzzardDir;

//void

void inputWindow()
{
    int Result = dlgDialog("Buzzard label generator"){
        dlgTabWidget{
            dlgTabPage("Main"){
                dlgHBoxLayout{
                    dlgStretch(1);
    dlgLabel("Enter label which you want to make:");
    dlgStretch(1);
}
dlgHBoxLayout
{
    dlgGridLayout
    {
        dlgCell(0, 0) dlgGroup("Start flag")
        {
            dlgHBoxLayout
            {
                dlgComboBox(startTag, selectedStart);
            }
        }
        dlgCell(0, 1) dlgGroup("Label:")
        {
            dlgStringEdit(label);
        }
        dlgCell(0, 2) dlgGroup("End flag")
        {
            dlgHBoxLayout
            {
                dlgComboBox(endTag, selectedEnd);
            }
        }
    }
}
dlgVBoxLayout
{
    dlgGroup("Optional arguments")
    {

        dlgHBoxLayout
        {

            dlgLabel("Scale factor (height of text in inches. The default is 0.04\") :");
            dlgRealEdit(scaleFactor);
        }
        dlgHBoxLayout
        {
            dlgLabel("Select layer for placing label (-l):");
            dlgComboBox(layers, selectedLayer);
        }
        dlgHBoxLayout
        {
            dlgLabel("Output mode (-o):");
            dlgRadioButton("board script", outputMode);   //outputMode = 0
            dlgRadioButton("library script", outputMode); //outputMode = 1
            dlgRadioButton("library file", outputMode);   //outputMode = 2
            dlgRadioButton("KiCAD fotprint", outputMode); //outputMode = 3
        }
        dlgGridLayout
        {
            dlgCell(0, 0) dlgGroup("Signal name (-n):")
            {
                dlgHBoxLayout
                {
                    dlgStringEdit(signalName);
                }
            }
            dlgCell(0, 1) dlgGroup("Trace width (-t):")
            {
                dlgHBoxLayout
                {
                    dlgRealEdit(traceWidth);
                }
            }
            dlgCell(0, 2) dlgGroup("Output writing mode (-w):")
            {
                dlgHBoxLayout
                {
                    dlgRadioButton("(over)write", writeMode); //writeMode = 0
                    dlgRadioButton("append", writeMode);      //writeMode = 1
                }
            }
        }
        dlgHBoxLayout
        {
            dlgLabel("Footprint  anchor position (-a):");
            dlgComboBox(align, selectedAlign);
        }
        dlgHBoxLayout
        {
            dlgLabel("Font (-f):");
                        dlgComboBox(font, selectedFont);
        }
    }
}
dlgSpacing(10);
dlgHBoxLayout
{
    //dlgStretch(1);
    dlgPushButton("+OK") dlgAccept();
    dlgPushButton("Cancel") dlgReject();
}
}
dlgTabPage("Settings")
{
    dlgHBoxLayout
    {
        dlgLabel(usage + "<hr>");
    }
    dlgHBoxLayout
    {

        dlgLabel("Output file (-d):");
        dlgStringEdit(outputFileName);
        dlgPushButton("Bro&wse")
        {
            outputFileName = dlgFileSave("Select output file..", outputFileName, "*.lbr");
        }
    }
    dlgHBoxLayout
    {
        dlgLabel("Buzzard.py script directory:");
        dlgStringEdit(buzzardDir);
        dlgPushButton("Bro&wse")
        {
            buzzardDir = dlgDirectory("Select folder..", "");
        }
    }
}
}
}
;
}
//Change any / in a string to \
//Useful for directory structure before calling a cmd
string convertForwardToBackSlashes(string thing)
{
    //Convert forward slashes to back slashes so we can run system command
    int pos = strrchr(thing, '/');
    while (pos >= 0)
    {
        //thing = strsub(thing, 0, pos) + "\\\\" + strsub(thing, pos + 1, strlen(thing)); //Remove and replace
        thing = strsub(thing, 0, pos) + "\\" + strsub(thing, pos + 1, strlen(thing)); //Remove and replace
        pos = strrchr(thing, '/');                                                    //Look for the next forward slash
    }
    return (thing);
}

string getProjectPath()
{
    if (board)
        board(B) return (filedir(B.name));
    if (schematic)
        schematic(B) return (filedir(B.name));
}

//add *@C:\Users\natha\Dropbox\Projects\Buzzard\output.lbr
//If there is one item in lib, it will mouse populate
//If there is more than one, a tree will be presented to use

void createLabel()
{
    inputWindow();

    //Convert forward slashes to back slashes so we can run system commands
    string localDirectory = convertForwardToBackSlashes(filedir(argv[0]));

    string commandToRun = "cmd.exe /C echo Relax. This can take a minute..."; //This is the start of the command. /C = close window
    //string commandToRun = "cmd.exe /K echo Relax. This can take a minute..."; //This is the start of the command. /C = close window

    commandToRun += " & echo Generating labels";

    //Convert the arguments into a single string so we can pass it along to the python script
    string argList = "";
    for (int x = 1; x < argc; x++)
        argList += argv[x] + " ";

    sprintf(s, "python \"%sbuzzard.py\" -o lib %s", localDirectory, argList);
    //sprintf(s, "python \"%sbuzzard.py\" -w a -v -o lib %s", localDirectory, argList);
    commandToRun += " & " + s + startTag[selectedStart] + label + endTag[selectedEnd];// + scaleFactor;// + layers[selectedLayer] + align[selectedAlign];

    dlgMessageBox(commandToRun);
    if (system(commandToRun) != 0)
    {
        //dlgMessageBox(s);
        dlgMessageBox(s, "Error: Command failed.", "OK");
        exit(-1);
    }

    //Python script should create a EAGLE friendly library file. Now run it.
    sprintf(s, "ADD '*@%s/output.lbr'", localDirectory);
    //sprintf(s, "", localDirectory);
    exit(s);
}

if (board)
{
    //inputWindow();
    createLabel();
}
else
{
    dlgMessageBox("Run this ULP from a board");
}
